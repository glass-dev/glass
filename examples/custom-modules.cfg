[system]
# this imports the "mymodule" example module from the "examples" folder
# have a look at the first part of the file to see the "plain" functions
# their names and arguments will show up below
modules = examples.mymodule

[simulation]
# these aren't actually used here
nside = 64
zbins = 1. 2.

[fields]
# the field called "foo" is generated by "my_plain_function()"
# the function takes one input, so it needs to be configured below
foo = my_plain_function
# the field called "bar" is generated by "my_other_plain_function()"
# the function takes "foo" as input, configured below
bar = my_other_plain_function
# the field called "baz" is generated by "my_print_function()"
# the function takes "foo" and "bar" as inputs, given below
# it does not return anything, but still needs a name for configuration
baz = my_print_function

# configure the "foo" function call to "my_plain_function()"
[fields:foo]
# this is the parameter name of the function
# the right-hand sides are python expressions, so strings need quotes
# positional arguments can be given by leaving out the assignment
my_array_size = 4

# configure the "bar" function call to "my_other_plain_function()"
[fields:bar]
# since strings need quotes, an unquoted "foo" is the field of that name
my_input_parameter = foo


# configure the "baz" function call to "my_print_function()"
[fields:baz]
# some of these are strings, some of these are references to names!
my_name = 'an array'
my_array = foo
my_other_name = 'its negative'
my_other_array = bar

# running this example will hence produce output similar to:
#
# an array
# [[ 0.01637376  0.45138847  1.47900412 -1.54009095]
#  [ 0.67963087 -0.64169386  0.72022202 -0.29905577]
#  [ 0.91230098  0.15561234  0.58632068 -1.77500437]
#  [-0.08165055  0.06751053  0.65486957 -0.59759399]]
# its negative
# [[-0.01637376 -0.45138847 -1.47900412  1.54009095]
#  [-0.67963087  0.64169386 -0.72022202  0.29905577]
#  [-0.91230098 -0.15561234 -0.58632068  1.77500437]
#  [ 0.08165055 -0.06751053 -0.65486957  0.59759399]]
#
