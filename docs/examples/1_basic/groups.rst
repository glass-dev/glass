
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/1_basic/groups.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_1_basic_groups.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_1_basic_groups.py:


Generator groups
================

This example demonstrates how generators can be grouped.  Groups provide a
layered namespace for outputs.  This is useful if similar generators are run
for different populations of objects, since it removes the need to manually
change input and output names.

.. GENERATED FROM PYTHON SOURCE LINES 13-18

Setup
-----
The simplest galaxies-only GLASS simulation, sampling galaxies uniformly over
the sphere using some redshift distribution.  Galaxies are sampled in two
groups: low and high redshifts.

.. GENERATED FROM PYTHON SOURCE LINES 18-50

.. code-block:: default


    import numpy as np
    import matplotlib.pyplot as plt

    # these are the GLASS imports: only the glass meta-module
    from glass import glass


    # basic parameters of the simulation
    nside = 128
    lmax = nside

    # galaxy density
    n_arcmin2 = 1e-4

    # parametric galaxy redshift distribution
    z = np.linspace(0, 3, 301)
    dndz_low = n_arcmin2*glass.observations.smail_nz(z, 0.5, 1.0, 2.5)
    dndz_high = n_arcmin2*glass.observations.smail_nz(z, 2.0, 4.0, 2.5)

    # generators for a uniform galaxies simulation
    generators = [
        glass.sim.zspace(z[0], z[-1]+0.01, dz=0.25),
        glass.sim.group('low-z', [
            glass.galaxies.gal_dist_uniform(z, dndz_low),
        ]),
        glass.sim.group('high-z', [
            glass.galaxies.gal_dist_uniform(z, dndz_high),
        ]),
    ]









.. GENERATED FROM PYTHON SOURCE LINES 51-55

Simulation
----------
Keep the simulated redshifts of both populations.  Note how the groups provide
a nested namespace for the data.

.. GENERATED FROM PYTHON SOURCE LINES 55-66

.. code-block:: default


    # arrays for true (ztrue) and photmetric (zphot) redshifts
    low_z = np.empty(0)
    high_z = np.empty(0)

    # simulate and add galaxies in each matter shell to arrays
    for shell in glass.sim.generate(generators):
        low_z = np.append(low_z, shell['low-z']['gal_z'])
        high_z = np.append(high_z, shell['high-z']['gal_z'])









.. GENERATED FROM PYTHON SOURCE LINES 67-70

Plots
-----
Plot the two distributions together with the expected inputs.

.. GENERATED FROM PYTHON SOURCE LINES 70-80

.. code-block:: default


    norm = glass.util.ARCMIN2_SPHERE*(z[-1] - z[0])/40

    for zz, nz, label in (low_z, dndz_low, 'low-z'), (high_z, dndz_high, 'high-z'):
        plt.hist(zz, bins=40, range=(z[0], z[-1]), histtype='stepfilled', alpha=0.5, label=label)
        plt.plot(z, norm*nz, '-k', lw=1, alpha=0.5)
    plt.xlabel('redshift $z$')
    plt.ylabel('number of galaxies')
    plt.legend()
    plt.show()



.. image-sg:: /examples/1_basic/images/sphx_glr_groups_001.png
   :alt: groups
   :srcset: /examples/1_basic/images/sphx_glr_groups_001.png, /examples/1_basic/images/sphx_glr_groups_001_2_0x.png 2.0x
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.500 seconds)


.. _sphx_glr_download_examples_1_basic_groups.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: groups.py <groups.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: groups.ipynb <groups.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
