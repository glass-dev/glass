
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/1_basic/matter.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_1_basic_matter.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_1_basic_matter.py:


Matter distribution
===================

This example simulates only the matter field in nested shells up to redshift 1.

.. GENERATED FROM PYTHON SOURCE LINES 10-14

Setup
-----
Set up a matter-only GLASS simulation, which requires a way to obtain matter
angular power spectra (here: CAMB) and the sampling itself (here: lognormal).

.. GENERATED FROM PYTHON SOURCE LINES 14-50

.. code-block:: default


    import numpy as np
    import healpy as hp
    import matplotlib.pyplot as plt

    # these are the GLASS imports: cosmology and the glass meta-module
    from cosmology import LCDM
    from glass import glass

    # also needs camb itself to get the parameter object
    import camb


    # cosmology for the simulation
    h = 0.7
    Oc = 0.25
    Ob = 0.05
    cosmo = LCDM(h=h, Om=Oc+Ob)

    # basic parameters of the simulation
    nside = 1024
    lmax = nside
    zend = 1.

    # set up CAMB parameters for matter angular power spectrum
    pars = camb.set_params(H0=100*h, omch2=Oc*h**2, ombh2=Ob*h**2)

    # generators for a matter-only simulation
    generators = [
        glass.sim.xspace(cosmo, 0, zend, dx=200.),
        glass.matter.mat_wht_density(cosmo),
        glass.camb.camb_matter_cl(pars, lmax),
        glass.matter.lognormal_matter(nside),
    ]









.. GENERATED FROM PYTHON SOURCE LINES 51-55

Simulation
----------
Run the simulation.  For each shell, plot an orthographic annulus of the
matter distribution.

.. GENERATED FROM PYTHON SOURCE LINES 55-84

.. code-block:: default


    # make a 2d grid in comoving distance
    # precompute the 2d radius r for the orthographic projection
    n = 2000
    rend = 1.05*cosmo.xc(zend)
    x, y = np.mgrid[-rend:rend:1j*n, -rend:rend:1j*n]
    r = np.hypot(x, y)
    grid = np.full(r.shape, np.nan)

    # set up the plot
    ax = plt.subplot(111)
    ax.axis('off')

    # simulate and project an annulus of each matter shell onto the grid
    for shell in glass.sim.generate(generators):
        rmin, rmax = cosmo.xc(shell['zmin', 'zmax'])
        delt = shell['delta']
        g = (rmin <= r) & (r < rmax)
        z = np.sqrt(1 - (r[g]/rmax)**2)
        theta, phi = hp.vec2ang(np.transpose([x[g]/rmax, y[g]/rmax, z]))
        grid[g] = hp.get_interp_val(delt, theta, phi)
        ax.add_patch(plt.Circle((0, 0), rmax, fc='none', ec='k', lw=0.5, alpha=0.5, zorder=1))

    # show the grid of shells
    ax.imshow(grid, extent=[-rend, rend, -rend, rend], zorder=0,
              cmap='bwr', vmin=-2, vmax=2)

    # show the resulting plot
    plt.show()



.. image-sg:: /examples/1_basic/images/sphx_glr_matter_001.png
   :alt: matter
   :srcset: /examples/1_basic/images/sphx_glr_matter_001.png, /examples/1_basic/images/sphx_glr_matter_001_2_0x.png 2.0x
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  48.858 seconds)


.. _sphx_glr_download_examples_1_basic_matter.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: matter.py <matter.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: matter.ipynb <matter.ipynb>`
