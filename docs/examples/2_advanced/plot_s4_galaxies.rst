
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/2_advanced/plot_s4_galaxies.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_2_advanced_plot_s4_galaxies.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_2_advanced_plot_s4_galaxies.py:


Stage IV Space Satellite Galaxy Survey
============

This example simulates a galaxy catalogue from a Stage IV Space Satellite Galaxy Survey such as
*Euclid* and *Roman* combining the :ref:`sphx_glr_examples_1_basic_plot_density.py` and
:ref:`sphx_glr_examples_1_basic_plot_lensing.py` examples with generators for
the intrinsic galaxy ellipticity and the resulting shear with some auxiliary functions.

The focus in this example is mock catalogue generation using auxiliary functions
built for simulating Stage-IV galaxies.

.. GENERATED FROM PYTHON SOURCE LINES 15-26

Setup
-----
The basic setup of galaxies and weak lensing fields is the same as in the
previous examples.

In addition to a generator for intrinsic galaxy ellipticities,
following a normal distribution, we also show how to use auxiliary functions
to generate photometric redshift distributions and visibility masks.

Finally, there is a generator that applies the reduced shear from the lensing
maps to the intrinsic ellipticities, producing the galaxy shears.

.. GENERATED FROM PYTHON SOURCE LINES 26-60

.. code-block:: default


    import numpy as np
    import healpy as hp
    import matplotlib.pyplot as plt

    # these are the GLASS imports: cosmology and glass ifself
    from cosmology import LCDM
    from glass import glass

    # also needs camb itself to get the parameter object
    import camb

    # cosmology for the simulation
    cosmo = LCDM(h=0.7, Om=0.3)

    # basic parameters of the simulation
    nside = 512
    lmax = nside

    # size of the dz of each shell to integrate along the LoS:
    dz = 0.05

    # galaxy density (using 1/100 of the expected galaxy number density for Stage-IV)
    n_arcmin2 = 0.3

    # sigma_ellipticity as expected for a stage-IV survey
    sigma_e = 0.27

    # photometric redshift error
    sigma_z0 = 0.03

    # set up CAMB parameters for matter angular power spectrum
    pars = camb.set_params(H0=100*cosmo.h, omch2=cosmo.Om*cosmo.h**2)








.. GENERATED FROM PYTHON SOURCE LINES 61-66

Simulation Setup
----------------
Here we setup the overall photometric redshift distribution
and separate it into equal density tomographic bins
with photometric redshift errors.

.. GENERATED FROM PYTHON SOURCE LINES 66-81

.. code-block:: default


    # setting up the random number generator:
    rng = np.random.default_rng(seed=42)

    # photometric redshift distribution following a Smail distribution
    z = np.linspace(0, 3.0, 1000)
    dndz = glass.observations.smail_nz(z, z_mode=0.9, alpha=2., beta=1.5)
    dndz *= n_arcmin2
    bz = 1.2

    # equal density bins:
    nbins = 10
    zedges = glass.observations.equal_dens_zbins(z, dndz, nbins=nbins)
    bin_nz = glass.observations.tomo_nz_gausserr(z, dndz, sigma_z0, zedges)








.. GENERATED FROM PYTHON SOURCE LINES 82-84

Plotting the overall redshift distribution and the
distribution for each of the equal density tomographic bins

.. GENERATED FROM PYTHON SOURCE LINES 84-99

.. code-block:: default

    plt.ion()
    plt.figure(figsize=(10, 5))
    plt.title("Stage IV Space Telescope - Photometric Distribution: equal density bins")
    SumNz = np.zeros_like(bin_nz[0])
    for nz in bin_nz:
        plt.fill_between(z, nz, alpha=0.5)
        SumNz = SumNz + nz
    plt.fill_between(z, dndz, alpha=0.2, label='dn/dz')
    plt.plot(z, SumNz, ls='--', label="Sum of the bins")
    plt.ylabel("dN/dz - gal/arcmin2")
    plt.xlabel("z")
    plt.legend()
    plt.tight_layout()
    plt.pause(1e-3)




.. image-sg:: /examples/2_advanced/images/sphx_glr_plot_s4_galaxies_001.png
   :alt: Stage IV Space Telescope - Photometric Distribution: equal density bins
   :srcset: /examples/2_advanced/images/sphx_glr_plot_s4_galaxies_001.png, /examples/2_advanced/images/sphx_glr_plot_s4_galaxies_001_2_0x.png 2.0x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 100-102

Make a visibility map with low NSIDE
also compute its fsky for the extected galaxy count

.. GENERATED FROM PYTHON SOURCE LINES 102-108

.. code-block:: default

    stageIV_mask = glass.observations.vmap_galactic_ecliptic(nside)

    # checking the mask:
    hp.mollview(stageIV_mask, title='Stage IV Space Survey-like Mask', unit='Visibility')
    plt.pause(1e-3)




.. image-sg:: /examples/2_advanced/images/sphx_glr_plot_s4_galaxies_002.png
   :alt: Stage IV Space Survey-like Mask
   :srcset: /examples/2_advanced/images/sphx_glr_plot_s4_galaxies_002.png, /examples/2_advanced/images/sphx_glr_plot_s4_galaxies_002_2_0x.png 2.0x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 109-110

generators for the clustering and lensing

.. GENERATED FROM PYTHON SOURCE LINES 110-122

.. code-block:: default

    generators = [
        glass.sim.zspace(0., 3.0001, dz=dz),
        glass.camb.camb_matter_cl(pars, lmax),
        glass.matter.lognormal_matter(nside, rng=rng),
        glass.lensing.convergence(cosmo),
        glass.lensing.shear(lmax),
        glass.observations.vis_constant(stageIV_mask, nside=nside),
        glass.galaxies.gal_dist_fullsky(z, bin_nz, bz=bz, rng=rng),
        glass.galaxies.gal_ellip_gaussian(sigma_e, rng=rng),
        glass.galaxies.gal_shear_interp(cosmo),
    ]








.. GENERATED FROM PYTHON SOURCE LINES 123-127

Simulation
----------
Simulate the galaxies with shears.  In each iteration, get the quantities of interest
to build our mock catalogue.

.. GENERATED FROM PYTHON SOURCE LINES 127-149

.. code-block:: default


    # keep count of total number of galaxies
    num = 0

    # we will store the catalogue as a dictionary:
    catalogue = {'RA': np.array([]), 'DEC': np.array([]), 'TRUE_Z': np.array([]),
                 'E1': np.array([]), 'E2': np.array([]), 'TOMO_ID': np.array([])}

    # iterate and store the quantities of interest for our mock catalogue:
    for shell in glass.sim.generate(generators):
        print(f"Generating shell #: {shell['#']}")
        num += shell['ngal']
        # let's assume here that lon lat here are RA and DEC:
        catalogue['RA'] = np.append(catalogue['RA'], shell['gal_lon'])
        catalogue['DEC'] = np.append(catalogue['DEC'], shell['gal_lat'])
        catalogue['TRUE_Z'] = np.append(catalogue['TRUE_Z'], shell['gal_z'])
        catalogue['E1'] = np.append(catalogue['E1'], shell['gal_ell'].real)
        catalogue['E2'] = np.append(catalogue['E2'], shell['gal_ell'].imag)
        catalogue['TOMO_ID'] = np.append(catalogue['TOMO_ID'], shell['gal_pop'])

    print(f"Total Number of galaxies sampled: {num}")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Generating shell #: 1
    Generating shell #: 2
    Generating shell #: 3
    Generating shell #: 4
    Generating shell #: 5
    Generating shell #: 6
    Generating shell #: 7
    Generating shell #: 8
    Generating shell #: 9
    Generating shell #: 10
    Generating shell #: 11
    Generating shell #: 12
    Generating shell #: 13
    Generating shell #: 14
    Generating shell #: 15
    Generating shell #: 16
    Generating shell #: 17
    Generating shell #: 18
    Generating shell #: 19
    Generating shell #: 20
    Generating shell #: 21
    Generating shell #: 22
    Generating shell #: 23
    Generating shell #: 24
    Generating shell #: 25
    Generating shell #: 26
    Generating shell #: 27
    Generating shell #: 28
    Generating shell #: 29
    Generating shell #: 30
    Generating shell #: 31
    Generating shell #: 32
    Generating shell #: 33
    Generating shell #: 34
    Generating shell #: 35
    Generating shell #: 36
    Generating shell #: 37
    Generating shell #: 38
    Generating shell #: 39
    Generating shell #: 40
    Generating shell #: 41
    Generating shell #: 42
    Generating shell #: 43
    Generating shell #: 44
    Generating shell #: 45
    Generating shell #: 46
    Generating shell #: 47
    Generating shell #: 48
    Generating shell #: 49
    Generating shell #: 50
    Generating shell #: 51
    Generating shell #: 52
    Generating shell #: 53
    Generating shell #: 54
    Generating shell #: 55
    Generating shell #: 56
    Generating shell #: 57
    Generating shell #: 58
    Generating shell #: 59
    Generating shell #: 60
    Total Number of galaxies sampled: 22512724




.. GENERATED FROM PYTHON SOURCE LINES 150-154

Catalogue checks
--------
Here we can perform some simple checks at the catlaogue legal to
see how our simulation performed.

.. GENERATED FROM PYTHON SOURCE LINES 154-167

.. code-block:: default


    # redshift distribution of tomographic bins & input distributions
    plt.figure(figsize=(10, 5))
    plt.title("Stage IV Space Telescope - Catalogue's Photometric Distribution")
    plt.ylabel("dN/dz - normalised")
    plt.xlabel("z")
    [plt.hist(catalogue['TRUE_Z'][catalogue['TOMO_ID'] == i], edgecolor='black', alpha=0.4,
              bins=50, density=1, label=f'Catalogue Bin-{i}') for i in range(0, 10)]
    [plt.fill_between(z, (bin_nz[i]/n_arcmin2)*nbins, alpha=0.6, hatch='//', label=f'Input bin-{i}') for i in range(0, 10)]
    plt.plot(z, dndz/n_arcmin2*nbins, ls='--', c='k')
    plt.legend(ncol=2)
    plt.ioff()
    plt.show()



.. image-sg:: /examples/2_advanced/images/sphx_glr_plot_s4_galaxies_003.png
   :alt: Stage IV Space Telescope - Catalogue's Photometric Distribution
   :srcset: /examples/2_advanced/images/sphx_glr_plot_s4_galaxies_003.png, /examples/2_advanced/images/sphx_glr_plot_s4_galaxies_003_2_0x.png 2.0x
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  7.728 seconds)


.. _sphx_glr_download_examples_2_advanced_plot_s4_galaxies.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_s4_galaxies.py <plot_s4_galaxies.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_s4_galaxies.ipynb <plot_s4_galaxies.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
